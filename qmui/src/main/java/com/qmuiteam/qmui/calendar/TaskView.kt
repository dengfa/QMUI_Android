package com.qmuiteam.qmui.calendarimport android.content.ClipDataimport android.content.ClipDescriptionimport android.content.Contextimport android.util.AttributeSetimport android.util.Logimport android.view.DragEventimport android.view.LayoutInflaterimport android.widget.FrameLayoutimport android.widget.Toastimport com.qmuiteam.qmui.Rimport kotlinx.android.synthetic.main.plan_view_task.view.*/** * Created by dengfa on 2022/1/17 */class TaskView @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0)    : FrameLayout(context, attrs, defStyleAttr) {    var taskInfo: TaskInfo = TaskInfo()    init {        LayoutInflater.from(context).inflate(R.layout.plan_view_task, this, true)    }    fun setTask(task: TaskInfo) {        taskInfo = task        updateView()    }    private fun updateView() {        val taskName = taskInfo.taskName        tvTaskName.text = taskName        setOnLongClickListener { view ->            val item = ClipData.Item(taskName)            val dragData = ClipData(taskName, arrayOf(ClipDescription.MIMETYPE_TEXT_PLAIN), item)            val shadow = DragShadowBuilder(this)            //view.startDragAndDrop(dragData, shadow, null, 0)            view.startDrag(dragData, shadow, taskInfo, 0)            true        }        setOnDragListener { v, e -> // Handles each of the expected events.            when (e.action) {                DragEvent.ACTION_DRAG_STARTED -> {                    Log.i("vincent", "ACTION_DRAG_STARTED $taskName ${e.clipDescription}")                    if (e.clipDescription.label == taskName) {                        v.visibility = INVISIBLE                        true                    } else {                        false                    }                }                DragEvent.ACTION_DRAG_ENTERED -> { // Applies a green tint to the View.                    Log.i("vincent", "ACTION_DRAG_ENTERED ${taskName}")                    v.alpha = 0.5f                    v.invalidate()                    true                }                DragEvent.ACTION_DRAG_LOCATION -> // Ignore the event.                {                    Log.i("vincent", "ACTION_DRAG_LOCATION ${taskName}")                    true                }                DragEvent.ACTION_DRAG_EXITED -> { // Resets the color tint to blue.                    Log.i("vincent", "ACTION_DRAG_EXITED ${taskName}")                    v.alpha = 1f                    v.invalidate()                    true                }                DragEvent.ACTION_DROP -> { // Gets the item containing the dragged data.                    Log.i("vincent", "ACTION_DROP ${taskName}")                    val item: ClipData.Item = e.clipData.getItemAt(0)                    val dragData = item.text                    Toast.makeText(context, "Dragged data is $dragData", Toast.LENGTH_LONG).show()                    true                }                DragEvent.ACTION_DRAG_ENDED -> { // Turns off any color tinting.                    Log.i("vincent", "ACTION_DRAG_ENDED ${taskName}")                    when (e.result) {                        true -> Toast.makeText(context, "The drop was handled.", Toast.LENGTH_LONG).show()                        else -> {                            Toast.makeText(context, "The drop didn't work.", Toast.LENGTH_LONG).show()                            v.visibility = VISIBLE                        }                    }                    true                }                else -> {                    Log.i("DragDrop Example", "Unknown action type received by View.OnDragListener.")                    false                }            }        }    }}data class TaskInfo(        var startTimeStamp: Long = 0L,        var endTimeStamp: Long = 0L,        var taskName: String = "task",)