package com.qmuiteam.qmui.widget.guideimport android.app.Activityimport android.content.Contextimport android.graphics.*import android.widget.RelativeLayoutimport android.widget.FrameLayoutimport android.view.Viewimport com.qmuiteam.qmui.toPximport com.qmuiteam.qmui.util.QMUIDisplayHelperclass EditorGuideView(private val mContent: Context) : RelativeLayout(mContent) {    private var guideCoverView: GuideCoverView? = null    private val targetViews = arrayListOf<View>()    private val locations = arrayListOf<Point>()    private var step: Int = -1    init {        setLayerType(View.LAYER_TYPE_SOFTWARE, null)        isClickable = true    }    private fun resetTarget(targetView: View, tipLocation: Point?, tipsView: View?) {        removeAllViews()        guideCoverView = GuideCoverView(context)        addView(guideCoverView, LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT))        guideCoverView?.resetTarget(targetView)        if (tipLocation != null && tipsView != null) {            val screenHeight = QMUIDisplayHelper.getRealScreenSize(context)[1]            val guideViewParams = RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT)            guideViewParams.setMargins(tipLocation.x - 150.toPx(), 0, 0, screenHeight - tipLocation.y)            guideViewParams.addRule(ALIGN_PARENT_BOTTOM)            this.addView(tipsView, guideViewParams)        }    }    fun hide() {        removeAllViews()        ((mContent as Activity).window.decorView as FrameLayout).removeView(this)    }    fun show(targets: List<View>, locations: List<Point>) {        if (targets.isEmpty() || locations.isEmpty()) return        step = -1        targetViews.clear()        targetViews.addAll(targets)        this.locations.clear()        this.locations.addAll(locations)        next()        ((mContent as Activity).window.decorView as FrameLayout).addView(this)    }    private fun next() {        if (step == targetViews.size - 1) return        step++        val tips = TipsView(context)        tips.setTips("title",            "tips",            "${step + 1}/${targetViews.size}",            "guide/tips_order.json",            if (step == 0) "" else "上一步",            if (step < targetViews.size - 1) "下一步" else "完成",            { pre() },            { if (step < targetViews.size - 1) next() else hide() })        val targetView = targetViews[step % (targetViews.size)]        val location = locations[step % (locations.size)]        resetTarget(targetView, location, tips)    }    private fun pre() {        if (step == 0) return        step--        val tips = TipsView(context)        tips.setTips("title",            "tips",            "${step + 1}/${targetViews.size}",            "guide/tips_order.json",            if (step == 0) "" else "上一步",            "下一步",            { pre() },            { next() })        val targetView = targetViews[step % (targetViews.size)]        val location = locations[step % (locations.size)]        resetTarget(targetView, location, tips)    }}