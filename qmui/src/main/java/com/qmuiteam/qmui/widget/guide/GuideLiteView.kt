package com.qmuiteam.qmui.widget.guideimport android.app.Activityimport android.content.Contextimport android.graphics.*import android.util.Logimport android.widget.RelativeLayoutimport android.view.ViewTreeObserver.OnGlobalLayoutListenerimport android.widget.FrameLayoutimport com.qmuiteam.qmui.Rimport android.view.Gravityimport android.view.Viewimport android.view.ViewGroupimport androidx.core.content.ContextCompatclass GuideLiteView(private val mContent: Context) : RelativeLayout(mContent), OnGlobalLayoutListener {    private var first = true    var radius = 0f    /**     * 需要显示提示信息的View     */    private var targetView: View? = null    /**     * 自定义View     */    private var customGuideView: View? = null    /**     * targetView是否已测量     */    private var isMeasured = false    /**     * targetView圆心     */    var center: IntArray = IntArray(2)    /**     * 背景色和透明度，格式 #aarrggbb     */    private var bgColor = 0    /**     * targetView左上角坐标     */    private var location: IntArray = IntArray(2)    private var onClickExit = false    private var onclickListener: OnClickCallback? = null    init {        setLayerType(View.LAYER_TYPE_SOFTWARE, null)    }    fun restoreState() {        radius = 0f        isMeasured = false        center = IntArray(2)        location = IntArray(2)        needDraw = true    }    fun setCustomGuideView(customGuideView: View?) {        this.customGuideView = customGuideView        if (!first) {            restoreState()        }    }    fun setBgColor(background_color: Int) {        bgColor = background_color    }    fun getTargetView(): View? {        return targetView    }    fun setTargetView(targetView: View?) {        this.targetView = targetView    }    fun hide() {        if (customGuideView != null) {            targetView!!.viewTreeObserver.removeOnGlobalLayoutListener(this)            removeAllViews()            ((mContent as Activity).window.decorView as FrameLayout).removeView(this)            restoreState()        }    }    fun show() {        if (targetView != null) {            targetView!!.viewTreeObserver.addOnGlobalLayoutListener(this)        }        setBackgroundResource(R.color.qmui_config_color_transparent)        ((mContent as Activity).window.decorView as FrameLayout).addView(this)        first = false    }    /**     * 添加提示文字，位置在targetView的下边     * 在屏幕窗口，添加蒙层，蒙层绘制总背景和透明圆形，圆形下边绘制说明文字     */    private fun createGuideView() {        // Tips布局参数        val guideViewParams = LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT)        guideViewParams.setMargins(location[0], location[1], 0, 0)        if (customGuideView != null) {            this.addView(customGuideView, guideViewParams)        }    }    /**     * 获得targetView 的宽高，如果未测量，返回｛-1， -1｝     *     * @return     */    private val targetViewSize: IntArray        get() {            val location = intArrayOf(-1, -1)            if (isMeasured) {                location[0] = targetView!!.width                location[1] = targetView!!.height            }            return location        }    private var needDraw = true    override fun onDraw(canvas: Canvas) {        super.onDraw(canvas)        if (!isMeasured || targetView == null) return        drawBackground(canvas)    }    private val porterDuffXfermode = PorterDuffXfermode(PorterDuff.Mode.SRC_OUT)    private fun drawBackground(canvas: Canvas) {        needDraw = false        // 背景画笔        val bgPaint = Paint()        bgPaint.isAntiAlias = true        if (bgColor != 0) bgPaint.color = bgColor else bgPaint.color = ContextCompat.getColor(context, R.color.qmui_config_color_25_pure_black)        canvas.save()        // 绘制屏幕背景        canvas.drawColor(bgColor)        // targetView的透明挖空        bgPaint.xfermode = porterDuffXfermode        val rect = RectF()        rect.left = location[0].toFloat()        rect.top = location[1].toFloat()        rect.right = location[0].toFloat() + (targetView?.width ?: 0)        rect.bottom = location[1].toFloat() + (targetView?.height ?: 0)        canvas.drawRoundRect(rect, radius, radius, bgPaint)        bgPaint.xfermode = null        canvas.restore()    }    fun setOnclickListener(onclickListener: OnClickCallback?) {        this.onclickListener = onclickListener    }    private fun setClickInfo() {        val exit = onClickExit        setOnClickListener {            if (onclickListener != null) {                onclickListener!!.onClickedGuideView()            }            if (exit) {                hide()            }        }    }    override fun onGlobalLayout() {        if (isMeasured || targetView == null) return        if (targetView!!.height > 0 && targetView!!.width > 0) {            isMeasured = true        }        // 获取targetView的中心坐标        targetView!!.getLocationInWindow(location)        // 获取中心坐标        center[0] = location[0] + targetView!!.width / 2        center[1] = location[1] + targetView!!.height / 2        // 添加GuideView        createGuideView()    }    interface OnClickCallback {        fun onClickedGuideView()    }    class Builder {        var mContext: Context? = null        private constructor()        constructor(ctx: Context?) {            mContext = ctx        }        companion object {            var guiderView: GuideLiteView? = null            var instance = Builder()            fun newInstance(ctx: Context): Builder {                guiderView = GuideLiteView(ctx)                return instance            }        }        fun setTargetView(target: View?): Builder {            guiderView!!.setTargetView(target)            return instance        }        fun setBgColor(color: Int): Builder {            guiderView!!.setBgColor(color)            return instance        }        fun setRadius(radius: Float): Builder {            guiderView!!.radius = radius            return instance        }        fun setCustomGuideView(view: View?): Builder {            guiderView!!.setCustomGuideView(view)            return instance        }        fun build(): GuideLiteView? {            guiderView!!.setClickInfo()            return guiderView        }        fun setOnclickListener(callback: OnClickCallback?): Builder {            guiderView!!.setOnclickListener(callback)            return instance        }    }}