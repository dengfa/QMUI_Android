package com.qmuiteam.qmui.widget.guideimport android.app.Activityimport android.content.Contextimport android.graphics.*import android.util.Logimport android.widget.RelativeLayoutimport android.view.ViewTreeObserver.OnGlobalLayoutListenerimport android.widget.FrameLayoutimport com.qmuiteam.qmui.Rimport android.view.Gravityimport android.view.Viewimport android.view.ViewGroupimport androidx.core.content.ContextCompatclass GuideView(private val mContent: Context) : RelativeLayout(mContent), OnGlobalLayoutListener {    private var first = true    /**     * GuideView 偏移量     */    private var offsetX = 0    private var offsetY = 0    /**     * targetView 的外切圆半径     */    var radius = 0    /**     * 需要显示提示信息的View     */    private var targetView: View? = null    /**     * 自定义View     */    private var customGuideView: View? = null    /**     * targetView是否已测量     */    private var isMeasured = false    /**     * targetView圆心     */    var center: IntArray? = null    /**     * 背景色和透明度，格式 #aarrggbb     */    private var bgColor = 0    /**     * 相对于targetView的位置.在target的那个方向     */    private var direction: Direction? = null    /**     * 形状     */    private var myShape: MyShape? = null    /**     * targetView左上角坐标     */    private var location: IntArray = intArrayOf()    private var onClickExit = false    private var onclickListener: OnClickCallback? = null    init {        setLayerType(View.LAYER_TYPE_SOFTWARE, null)    }    fun restoreState() {        offsetY = 0        offsetX = offsetY        radius = 0        isMeasured = false        center = null        needDraw = true    }    fun setOffsetX(offsetX: Int) {        this.offsetX = offsetX    }    fun setOffsetY(offsetY: Int) {        this.offsetY = offsetY    }    fun setDirection(direction: Direction?) {        this.direction = direction    }    fun setShape(shape: MyShape?) {        myShape = shape    }    fun setCustomGuideView(customGuideView: View?) {        this.customGuideView = customGuideView        if (!first) {            restoreState()        }    }    fun setBgColor(background_color: Int) {        bgColor = background_color    }    fun getTargetView(): View? {        return targetView    }    fun setTargetView(targetView: View?) {        this.targetView = targetView    }    fun hide() {        if (customGuideView != null) {            targetView!!.viewTreeObserver.removeOnGlobalLayoutListener(this)            removeAllViews()            ((mContent as Activity).window.decorView as FrameLayout).removeView(this)            restoreState()        }    }    fun show() {        if (targetView != null) {            targetView!!.viewTreeObserver.addOnGlobalLayoutListener(this)        }        setBackgroundResource(R.color.qmui_config_color_transparent)        ((mContent as Activity).window.decorView as FrameLayout).addView(this)        first = false    }    /**     * 添加提示文字，位置在targetView的下边     * 在屏幕窗口，添加蒙层，蒙层绘制总背景和透明圆形，圆形下边绘制说明文字     */    private fun createGuideView() {        // Tips布局参数        var guideViewParams: LayoutParams        guideViewParams = LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT)        guideViewParams.setMargins(0, center!![1] + radius + 10, 0, 0)        if (customGuideView != null) {            if (direction != null) {                val width = this.width                val height = this.height                val left = center!![0] - radius                val right = center!![0] + radius                val top = center!![1] - radius                val bottom = center!![1] + radius                when (direction) {                    Direction.TOP -> {                        this.gravity = Gravity.BOTTOM or Gravity.CENTER_HORIZONTAL                        guideViewParams.setMargins(offsetX, offsetY - height + top, -offsetX, height - top - offsetY)                    }                    Direction.LEFT -> {                        this.gravity = Gravity.RIGHT                        guideViewParams.setMargins(offsetX - width + left, top + offsetY, width - left - offsetX, -top - offsetY)                    }                    Direction.BOTTOM -> {                        this.gravity = Gravity.CENTER_HORIZONTAL                        guideViewParams.setMargins(offsetX, bottom + offsetY, -offsetX, -bottom - offsetY)                    }                    Direction.RIGHT -> guideViewParams.setMargins(right + offsetX, top + offsetY, -right - offsetX, -top - offsetY)                    Direction.LEFT_TOP -> {                        this.gravity = Gravity.RIGHT or Gravity.BOTTOM                        guideViewParams.setMargins(offsetX - width + left, offsetY - height + top, width - left - offsetX, height - top - offsetY)                    }                    Direction.LEFT_BOTTOM -> {                        this.gravity = Gravity.RIGHT                        guideViewParams.setMargins(offsetX - width + left, bottom + offsetY, width - left - offsetX, -bottom - offsetY)                    }                    Direction.RIGHT_TOP -> {                        this.gravity = Gravity.BOTTOM                        guideViewParams.setMargins(right + offsetX, offsetY - height + top, -right - offsetX, height - top - offsetY)                    }                    Direction.RIGHT_BOTTOM -> guideViewParams.setMargins(right + offsetX, bottom + offsetY, -right - offsetX, -top - offsetY)                }            } else {                guideViewParams = LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT)                guideViewParams.setMargins(offsetX, offsetY, -offsetX, -offsetY)            }            this.addView(customGuideView, guideViewParams)        }    }    /**     * 获得targetView 的宽高，如果未测量，返回｛-1， -1｝     *     * @return     */    private val targetViewSize: IntArray        private get() {            val location = intArrayOf(-1, -1)            if (isMeasured) {                location[0] = targetView!!.width                location[1] = targetView!!.height            }            return location        }    /**     * 获得targetView 的半径     *     * @return     */    private val targetViewRadius: Int        private get() {            if (isMeasured) {                val size = targetViewSize                val x = size[0]                val y = size[1]                return (Math.sqrt((x * x + y * y).toDouble()) / 2).toInt()            }            return -1        }    private var needDraw = true    override fun onDraw(canvas: Canvas) {        super.onDraw(canvas)        if (!isMeasured) return        if (targetView == null) return        drawBackground(canvas)    }    private val porterDuffXfermode = PorterDuffXfermode(PorterDuff.Mode.SRC_OUT)    private fun drawBackground(canvas: Canvas) {        needDraw = false        // 背景画笔        val bgPaint = Paint()        bgPaint.isAntiAlias = true        if (bgColor != 0) bgPaint.color = bgColor else bgPaint.color = ContextCompat.getColor(context, R.color.qmui_config_color_25_pure_black)        canvas.save()        // 绘制屏幕背景        canvas.drawColor(bgColor)        // targetView的透明挖空        bgPaint.xfermode = porterDuffXfermode        if (myShape != null) {            val oval = RectF()            when (myShape) {                MyShape.CIRCULAR -> canvas.drawCircle(center!![0].toFloat(), center!![1].toFloat(), radius.toFloat(), bgPaint) //绘制圆形                MyShape.ELLIPSE -> {                    //RectF对象                    oval.left = (center!![0] - 150).toFloat() //左边                    oval.top = (center!![1] - 50).toFloat() //上边                    oval.right = (center!![0] + 150).toFloat() //右边                    oval.bottom = (center!![1] + 50).toFloat() //下边                    canvas.drawOval(oval, bgPaint) //绘制椭圆                }                MyShape.RECTANGULAR -> {                    //RectF对象                    oval.left = (center!![0] - 150).toFloat() //左边                    oval.top = (center!![1] - 50).toFloat() //上边                    oval.right = (center!![0] + 150).toFloat() //右边                    oval.bottom = (center!![1] + 50).toFloat() //下边                    canvas.drawRoundRect(oval, radius.toFloat(), radius.toFloat(), bgPaint) //绘制圆角矩形                }            }        } else {            canvas.drawCircle(center!![0].toFloat(), center!![1].toFloat(), radius.toFloat(), bgPaint) //绘制圆形        }        bgPaint.xfermode = null        canvas.restore()    }    fun setOnClickExit(onClickExit: Boolean) {        this.onClickExit = onClickExit    }    fun setOnclickListener(onclickListener: OnClickCallback?) {        this.onclickListener = onclickListener    }    private fun setClickInfo() {        val exit = onClickExit        setOnClickListener {            if (onclickListener != null) {                onclickListener!!.onClickedGuideView()            }            if (exit) {                hide()            }        }    }    override fun onGlobalLayout() {        if (isMeasured) return        if (targetView!!.height > 0 && targetView!!.width > 0) {            isMeasured = true        }        // 获取targetView的中心坐标        if (center == null) {            // 获取右上角坐标            location = IntArray(2)            targetView!!.getLocationInWindow(location)            center = IntArray(2)            // 获取中心坐标            center!![0] = location[0] + targetView!!.width / 2            center!![1] = location[1] + targetView!!.height / 2        }        // 获取targetView外切圆半径        if (radius == 0) {            radius = targetViewRadius        }        // 添加GuideView        createGuideView()    }    /**     * 定义GuideView相对于targetView的方位，共八种。不设置则默认在targetView下方     */    enum class Direction {        LEFT, TOP, RIGHT, BOTTOM, LEFT_TOP, LEFT_BOTTOM, RIGHT_TOP, RIGHT_BOTTOM    }    /**     * 定义目标控件的形状，共3种。圆形，椭圆，带圆角的矩形（可以设置圆角大小），不设置则默认是圆形     */    enum class MyShape {        CIRCULAR, ELLIPSE, RECTANGULAR    }    /**     * GuideView点击Callback     */    interface OnClickCallback {        fun onClickedGuideView()    }    class Builder {        var mContext: Context? = null        private constructor()        constructor(ctx: Context?) {            mContext = ctx        }        companion object {            var guiderView: GuideView? = null            var instance = Builder()            fun newInstance(ctx: Context): Builder {                guiderView = GuideView(ctx)                return instance            }        }        fun setTargetView(target: View?): Builder {            guiderView!!.setTargetView(target)            return instance        }        fun setBgColor(color: Int): Builder {            guiderView!!.setBgColor(color)            return instance        }        fun setDirction(dir: Direction?): Builder {            guiderView!!.setDirection(dir)            return instance        }        fun setShape(shape: MyShape?): Builder {            guiderView!!.setShape(shape)            return instance        }        fun setOffset(x: Int, y: Int): Builder {            guiderView!!.setOffsetX(x)            guiderView!!.setOffsetY(y)            return instance        }        fun setRadius(radius: Int): Builder {            guiderView!!.radius = radius            return instance        }        fun setCustomGuideView(view: View?): Builder {            guiderView!!.setCustomGuideView(view)            return instance        }        fun setCenter(X: Int, Y: Int): Builder {            guiderView!!.center = intArrayOf(X, Y)            return instance        }        fun build(): GuideView? {            guiderView!!.setClickInfo()            return guiderView        }        fun setOnclickExit(onclickExit: Boolean): Builder {            guiderView!!.setOnClickExit(onclickExit)            return instance        }        fun setOnclickListener(callback: OnClickCallback?): Builder {            guiderView!!.setOnclickListener(callback)            return instance        }    }}